name: OpenWrt Standard

on:
  workflow_dispatch:
  schedule:
    - cron: "0 20 * * *"  # 修复cron格式，添加引号

env:
  REPO_URL: https://github.com/z901251/immortalwrt-rk356x
  REPO_BRANCH: main
  CONFIG_FILE: configs.config
  DIY_SCRIPT: diy.sh
  CLASH_KERNEL: arm64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: immortalwrt-RK3568-NSY-G68
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
  Build:
    runs-on: ubuntu-22.04

    outputs:
      COMMIT_AUTHOR: ${{ steps.clone.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ steps.clone.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ steps.clone.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ steps.clone.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ steps.variable.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.variable.outputs.DEVICE_SUBTARGET }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4  # 更新到最新版本

    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(grep "physical id" /proc/cpuinfo | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(grep -m1 name /proc/cpuinfo | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB || true)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* 2>/dev/null | grep -v [1-9] | wc -l)" && df -hT
        
    - name: Release Space
      uses: jlumbroso/free-disk-space@v1
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        docker-images: true
        large-packages: true
        swap-storage: true

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        df -hT
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android || true
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204) || true
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir
        
    - name: Clone Source Code
      working-directory: /mnt/workdir
      id: clone
      run: |
        df -hT
        git clone "$REPO_URL" -b "$REPO_BRANCH" openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        COMMIT_AUTHOR=$(git show -s --format="%an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        COMMIT_DATE=$(git show -s --format="%ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        COMMIT_MESSAGE=$(git show -s --format="%s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        COMMIT_HASH=$(git show -s --format="%H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
        # 添加输出变量
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_OUTPUT
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT
        
    - name: Generate Variables
      id: variable
      run: |
        df -hT
        cp "$CONFIG_FILE" "$OPENWRT_PATH/.config"
        cd "$OPENWRT_PATH"
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(grep 'CONFIG_TARGET_BOARD=' .config | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_OUTPUT
        DEVICE_SUBTARGET=$(grep 'CONFIG_TARGET_SUBTARGET=' .config | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_OUTPUT
        
    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.OPENWRT_PATH }}/dl
          ${{ env.OPENWRT_PATH }}/staging_dir
          ${{ env.OPENWRT_PATH }}/build_dir
        key: ${{ runner.os }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        
    - name: Install Feeds
      run: |
        df -hT
        cd "$OPENWRT_PATH"
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    # 修复的核心部分 - 路径处理
    - name: Load Custom Configuration
      run: |
        df -hT
        # 移动文件和配置
        [ -e files ] && mv files "$OPENWRT_PATH/files"
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" "$OPENWRT_PATH/.config"
        
        # 确保在仓库目录执行脚本
        cd "$GITHUB_WORKSPACE"
        
        # 添加脚本存在性检查
        if [ ! -f "$DIY_SCRIPT" ]; then
          echo "❌ 错误：DIY脚本 $DIY_SCRIPT 不存在！"
          exit 1
        fi
        
        # 设置脚本执行权限
        chmod +x scripts/*.sh
        chmod +x "$DIY_SCRIPT"
        
        # 执行脚本（使用绝对路径更安全）
        echo "执行DIY脚本: $PWD/$DIY_SCRIPT"
        "./$DIY_SCRIPT"
        
        # 执行其他脚本
        if [ -f "scripts/preset-clash-core.sh" ]; then
          echo "执行Clash核心脚本"
          ./scripts/preset-clash-core.sh "$CLASH_KERNEL"
        fi
        
        if [ -f "scripts/preset-adguard-core.sh" ]; then
          echo "执行AdGuard核心脚本"
          ./scripts/preset-adguard-core.sh "$CLASH_KERNEL"
        fi
        
        # 返回OpenWRT目录
        cd "$OPENWRT_PATH"
        
    - name: Download DL Package
      run: |
        df -hT
        cd "$OPENWRT_PATH"
        make defconfig
        make download -j$(nproc)
        # 清理无效的小文件
        find dl -size -1024c -ls -exec rm -f {} \;
        
    - name: Compile Firmware
      id: compile
      run: |
        df -hT
        cd "$OPENWRT_PATH"
        mkdir -p files/etc/uci-defaults
        cp "$GITHUB_WORKSPACE/scripts/init-settings.sh" files/etc/uci-defaults/99-init-settings
        
        echo "使用 $(nproc) 线程编译"
        make -j$(nproc) || make -j1 || make -j1 V=s
        
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        echo "TAG_DATE=$(date +'%Y.%m.%d-%H.%M')" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        
    - name: Check Space Usage
      if: ${{ !cancelled() }}
      run: df -hT

    - name: Upload Bin Directory
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin
        
    - name: Modify Uboot Image
      run: |
        df -hT
        cd "$OPENWRT_PATH/bin/targets/rockchip/armv8"
        if [ -f "$GITHUB_WORKSPACE/scripts/modify-uboot-image.sh" ]; then
          chmod +x "$GITHUB_WORKSPACE/scripts/modify-uboot-image.sh"
          "$GITHUB_WORKSPACE/scripts/modify-uboot-image.sh"
        else
          echo "⚠ 未找到uboot修改脚本，跳过此步骤"
        fi
        
    - name: Organize Files
      if: steps.compile.outputs.status == 'success'
      run: |
        cd "$OPENWRT_PATH/bin/targets"/*/*
        cat sha256sums
        cp "$OPENWRT_PATH/.config" build.config
        mkdir -p packages
        mv -f "$OPENWRT_PATH/bin/packages"/*/*/*.ipk packages/ || true
        tar -zcf Packages.tar.gz packages
        rm -rf packages feeds.buildinfo version.buildinfo
        
        # 获取内核版本
        KERNEL_VER=$(grep '^kernel' *.manifest | head -1 | cut -d- -f2 | tr -d ' ')
        echo "KERNEL=$KERNEL_VER" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        
    - name: Upload Firmware To Artifact
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware To Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ env.FIRMWARE_TAG }} 构建 ${{ env.DATE }}
        tag: ${{ env.TAG_DATE }}-${{ env.FIRMWARE_TAG }}
        token: ${{ env.GITHUB_TOKEN }}
        files: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **OpenWrt固件 - ${{ env.FIRMWARE_TAG }}**
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }} (rk33xx, rk35xx)
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 🌐 默认地址: 192.168.1.1
          - 🔑 默认密码: password
          ### 🧊 编译信息
          - 最后提交作者: ${{ env.COMMIT_AUTHOR }}
          - 提交时间: ${{ env.COMMIT_DATE }}
          - 提交信息: ${{ env.COMMIT_MESSAGE }}
          - 提交哈希: [${{ env.COMMIT_HASH }}](${{ env.REPO_URL }}/commit/${{ env.COMMIT_HASH }})
